import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';
import { Document, Types } from 'mongoose';

export type AppointmentDocument = Appointment & Document;

@Schema({ timestamps: true })
export class Appointment {
    _id: Types.ObjectId;

    @Prop({ type: Types.ObjectId, ref: 'Patient', required: true })
    patient: Types.ObjectId;  // مرجع إلى المريض

    @Prop({ type: Types.ObjectId, ref: 'Clinic', required: true })
    clinic: Types.ObjectId;  // العيادة التي تم فيها الموعد

    @Prop({ type: Types.ObjectId, ref: 'User', required: true })
    doctor: Types.ObjectId;  // الطبيب الذي تم الحجز عنده

    @Prop({ required: true })
    datetime: Date;  // تاريخ ووقت الموعد المحدد للحجز

    @Prop()
    startTime?: Date;  // وقت بدء الموعد الفعلي

    @Prop()
    endTime?: Date;  // وقت انتهاء الموعد الفعلي

    @Prop()
    reason?: string;  // سبب الزيارة

    @Prop({ enum: ['scheduled', 'completed', 'cancelled'], default: 'scheduled' })
    status: string;  // حالة الموعد

    @Prop({ type: Types.ObjectId, ref: 'MedicalRecord', default: null })
    medicalRecord?: Types.ObjectId;  // مرجع إلى السجل الطبي (يتم إنشاؤه بعد انتهاء الموعد)

    @Prop({ type: Number, min: 1, max: 5 })
    patientRating?: number;  // تقييم المريض للطبيب (1-5 نجوم)

    @Prop({ default: '' })
    patientFeedback?: string;  // ملاحظات المريض عن الخدمة
}

export const AppointmentSchema = SchemaFactory.createForClass(Appointment);

import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';
import {Document, Schema as MongooseSchema, Types} from 'mongoose';

export type ClinicDocument = Clinic & Document;

@Schema({ timestamps: true })
export class Clinic {
    _id: Types.ObjectId;

    @Prop({ required: true })
    name: string;  // اسم العيادة

    @Prop({ required: true })
    address: string; // عنوان العيادة

    @Prop({ type: Types.ObjectId, ref: 'Department', default: null })
    departmentId?: Types.ObjectId;  // القسم الذي تتبع له العيادة (إذا وجدت)

    @Prop({ type: Types.ObjectId, ref: 'ClinicCollection', default: null })
    clinicCollectionId?: Types.ObjectId;  // المجموعة التي تنتمي إليها العيادة (إذا وجدت)

    @Prop({ type: [Types.ObjectId], ref: 'User', default: [] })
    staff: Types.ObjectId[]; // الموظفون والأطباء العاملون في هذه العيادة
}

export const ClinicSchema = SchemaFactory.createForClass(Clinic);

import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';
import {Document, Schema as MongooseSchema, Types} from 'mongoose';


export type ClinicCollectionDocument = ClinicCollection & Document;

@Schema({ timestamps: true })
export class ClinicCollection {
    _id: Types.ObjectId;

    @Prop({ required: true })
    name: string;  // اسم مجموعة العيادات

    @Prop({ type: Types.ObjectId, ref: 'Company', default: null })
    companyId?: Types.ObjectId;  // الشركة المالكة للمجموعة (إذا وجدت)

    @Prop({ type: [Types.ObjectId], ref: 'Department', default: [] })
    departments: Types.ObjectId[]; // الأقسام داخل هذه المجموعة
}

export const ClinicCollectionSchema = SchemaFactory.createForClass(ClinicCollection);
import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';
import { Document, Schema as MongooseSchema, Types } from 'mongoose';

export type CompanyDocument = Company & Document;

@Schema({ timestamps: true })
export class Company {
    _id: Types.ObjectId;

    @Prop({ required: true, unique: true })
    name: string;  // اسم الشركة

    @Prop({ type: [Types.ObjectId], ref: 'ClinicCollection', default: [] })
    clinicCollections: Types.ObjectId[]; // المجموعات المرتبطة بها
}

export const CompanySchema = SchemaFactory.createForClass(Company);
import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';
import {Document, Schema as MongooseSchema, Types} from 'mongoose';

export type DepartmentDocument = Department & Document;

@Schema({ timestamps: true })
export class Department {
    _id: Types.ObjectId;

    @Prop({ required: true })
    name: string;  // اسم القسم (مثال: طب الأسنان، الجراحة العامة)

    @Prop({ type: Types.ObjectId, ref: 'ClinicCollection', required: true })
    clinicCollectionId: Types.ObjectId;  // مجموعة العيادات التي ينتمي إليها القسم

    @Prop({ type: [Types.ObjectId], ref: 'Clinic', default: [] })
    clinics: Types.ObjectId[]; // العيادات التي تتبع هذا القسم
}

export const DepartmentSchema = SchemaFactory.createForClass(Department);
import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';
import { Document, Schema as MongooseSchema, Types } from 'mongoose';
import { User } from 'src/modules/user/schemas/user.schema';

export type DoctorDocument = Doctor & Document;

class TimeSlot {
    @Prop({ required: true })
    startTime: string; // وقت بدء العمل (مثال: "04:00 PM")

    @Prop({ required: true })
    endTime: string; // وقت انتهاء العمل (مثال: "08:00 PM")
}

class WorkingHours {
    @Prop({ required: true, enum: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'] })
    day: string; // اليوم

    @Prop({ type: [TimeSlot], default: [] })
    timeSlots: TimeSlot[]; // قائمة الفترات الزمنية لكل يوم
}

@Schema({ timestamps: true })
export class Doctor {
    @Prop({ required: true })
    name: string;  // اسم الطبيب

    @Prop()
    phone: string;  // رقم هاتف الطبيب

    @Prop({ type: [String], default: [] })
    specialties: string[];  // تخصصات الطبيب

    @Prop({ type: MongooseSchema.Types.ObjectId, ref: 'User', unique: true, default: null })
    user?: MongooseSchema.Types.ObjectId;  // مرجع لحساب المستخدم (اختياري)

    @Prop({ type: [WorkingHours], default: [] })
    workingHours: WorkingHours[];
}

export const DoctorSchema = SchemaFactory.createForClass(Doctor);
import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';
import { Document, Schema as MongooseSchema, Types } from 'mongoose';

export type EmployeeDocument = Employee & Document;

class TimeSlot {
    @Prop({ required: true })
    startTime: string; // وقت بدء العمل (مثال: "04:00 PM")

    @Prop({ required: true })
    endTime: string; // وقت انتهاء العمل (مثال: "08:00 PM")
}

class WorkingHours {
    @Prop({ required: true, enum: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'] })
    day: string; // اليوم

    @Prop({ type: [TimeSlot], default: [] })
    timeSlots: TimeSlot[]; // قائمة الفترات الزمنية لكل يوم
}

@Schema({ timestamps: true })
export class Employee {
    @Prop({ required: true })
    name: string;

    @Prop()
    phone: string;

    @Prop()
    jobTitle: string;

    @Prop({ type: MongooseSchema.Types.ObjectId, ref: 'User', unique: true, default: null })
    user?: MongooseSchema.Types.ObjectId;  // مرجع لحساب المستخدم (اختياري)

    @Prop({ type: [WorkingHours], default: [] })
    workingHours: WorkingHours[];
}

export const EmployeeSchema = SchemaFactory.createForClass(Employee);
import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';
import { Document, Types } from 'mongoose';

export type MedicalRecordDocument = MedicalRecord & Document;

@Schema({ timestamps: true })
export class MedicalRecord {
    _id: Types.ObjectId;

    @Prop({ type: Types.ObjectId, ref: 'Appointment', required: true })
    appointment: Types.ObjectId;  // مرجع إلى الموعد، يحتوي على جميع البيانات المرتبطة

    @Prop({ required: true })
    diagnosis: string;  // التشخيص الطبي

    @Prop({ type: [String], default: [] })
    medications: string[];  // قائمة الأدوية الموصوفة

    @Prop({ type: [String], default: [] })
    labTests: string[];  // التحاليل المطلوبة

    @Prop({ default: '' })
    notes?: string;  // ملاحظات إضافية من الطبيب

    @Prop({ enum: ['draft', 'finalized'], default: 'draft' })
    recordStatus: string;  // حالة السجل (مسودة أو نهائي)
}

export const MedicalRecordSchema = SchemaFactory.createForClass(MedicalRecord);
import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';
import { Document, Schema as MongooseSchema } from 'mongoose';

export type PatientDocument = Patient & Document;

@Schema({ timestamps: true }) // إضافة حقول createdAt و updatedAt تلقائيًا
export class Patient {
    @Prop({ required: true })
    name: string;  // اسم المريض

    @Prop({ required: true })
    phone: string;  // رقم هاتف المريض (للتواصل)

    @Prop({ required: true })
    dateOfBirth: Date;  // تاريخ الميلاد

    @Prop({ required: true, enum: ['male', 'female'] })
    gender: string;  // الجنس

    @Prop()
    email?: string;  // البريد الإلكتروني للمريض (اختياري)

    @Prop()
    address?: string;  // عنوان المريض (اختياري)

    @Prop()
    notes?: string; // ملاحظات إضافية عن المريض

    @Prop({
        type: {
            insuranceProvider: { type: String, required: false }, // اسم شركة التأمين
            insuranceNumber: { type: String, required: false }, // رقم بطاقة التأمين
            coveragePercentage: { type: Number, required: false, min: 0, max: 100 }, // نسبة التغطية (مثلاً 80%)
            expiryDate: { type: Date, required: false }, // تاريخ انتهاء صلاحية التأمين
            insuranceType: { type: String, required: false, enum: ['private', 'governmental', 'corporate'] }, // نوع التأمين
        },
        default: null
    })
    insurance?: {
        insuranceProvider?: string;
        insuranceNumber?: string;
        coveragePercentage?: number;
        expiryDate?: Date;
        insuranceType?: string;
    };
}

export const PatientSchema = SchemaFactory.createForClass(Patient);
import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';
import { Document, Types } from 'mongoose';

export type RoleDocument = Role & Document;

@Schema({ timestamps: true })
export class Role {
    _id: Types.ObjectId;

    @Prop({ required: true, unique: true })
    name: string; // Role name (Admin, Doctor, Receptionist)

    @Prop({ type: [String], default: [] })
    permissions: string[]; // List of system permissions "view_patients", "write_prescriptions"

    @Prop()
    description?: string;
}

export const RoleSchema = SchemaFactory.createForClass(Role);
import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';
import {Document, Schema as MongooseSchema, Types} from 'mongoose';

export type UserDocument = User & Document;

@Schema({ timestamps: true }) // سيضيف createdAt و updatedAt تلقائيًا
export class User {
    @Prop({ required: true })
    name: string;  // اسم المستخدم

    @Prop({ required: true, unique: true })
    email: string;  // البريد الإلكتروني (فريد لعدم التكرار)

    @Prop({ required: true })
    password: string;  // كلمة المرور

    @Prop({ default: true })
    isActive: boolean;

    @Prop({ type: [Types.ObjectId], ref: 'Role', required: true })
    roleIds: Types.ObjectId[];  // قائمة بمعرفات الأدوار المرتبطة بالمستخدم

    @Prop({ type: Types.ObjectId, ref: 'Company', default: null })
    companyId?: Types.ObjectId;  // الشركة التي يعمل بها الموظف (إن وجد)

    @Prop({ type: Types.ObjectId, ref: 'ClinicCollection', default: null })
    clinicCollectionId?: Types.ObjectId;  // مجموعة العيادات التي يعمل بها الموظف (إن وجد)

    @Prop({ type: Types.ObjectId, ref: 'Department', default: null })
    departmentId?: Types.ObjectId;  // القسم الذي يعمل به الطبيب أو الموظف (إن وجد)

    @Prop({ type: [Types.ObjectId], ref: 'Clinic', default: [] })
    clinics: Types.ObjectId[]; // العيادات التي يعمل بها الطبيب أو الموظف (يمكن أن يعمل في أكثر من عيادة)

    @Prop({ type: Types.ObjectId, ref: 'Doctor', default: null })
    doctorId?: Types.ObjectId;  // مرجع إلى جدول الأطباء (إن كان المستخدم طبيبًا)

    @Prop({ type: Types.ObjectId, ref: 'Employee', default: null })
    employeeId?: Types.ObjectId;  // مرجع إلى جدول الموظفين (إن كان المستخدم موظفًا)
}
export const UserSchema = SchemaFactory.createForClass(User);
